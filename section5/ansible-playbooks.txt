================================================================================
Ansible Playbooks
================================================================================

--------------------------------------------------------------------------------
Ansible Playbooks
--------------------------------------------------------------------------------

- Playbook - a single YAML file containing a set of plays
    - Contains a set of tasks to be run on hosts
    - tasks - action to be performed on the host
    - List of dictionaries
        - Each dictionary is a play
        - all dictionaries are ordered, key-value pairs are not
            - (ie plays are executed top to bottom, tasks top to botton, but "name" and "hosts" don't need to be ordered)
    - ansible-doc -l to list available modules to ansible
    - ansible-playbook playbook.yml

--------------------------------------------------------------------------------
Verifying Playbooks
--------------------------------------------------------------------------------

- How do you prevent production downtime due to a bad ansible script?
- Rehearsal that allows you to catch and rectify errors
- Check mode
    - Ansible's "dry run" where no actual changes are made on hosts
        - See made changes without applying them
        - use "--check" parameter
- Diff mode
    - Shows differences between current state and after state
        use "--check --diff"
        - Useful for understanding differences from before and after
- Syntax check
    - "--syntax-check"

--------------------------------------------------------------------------------
Ansible-Lint
--------------------------------------------------------------------------------

- Performs linting on ansible playbooks, roles, collections
- Checks for potential errors, bugs, styling errors, and suspicious constructs
- Providing valueable insights and catches things that may slip past
    - Inconsistent indentation
    - Name types inconsistent

--------------------------------------------------------------------------------
Conditionals
--------------------------------------------------------------------------------

- Some servers may have differences that need to be accounted for with conditionals
    - ie apt on Ubuntu vs Yum on Red Hat
- use "when: <condition>" key
    - ansible_os_family == 'RedHat', 'Debian', etc.
    - 'or', 'and', ''
- conditionals in loops
    vars:
        packages:
            - name: nginx
              required: True
            - name: mysql
              required: True
            - name: apache
              required: False
    tasks:
        - name: install "{{ item.name }} on Debian"
          apt:
            name: "{{ item.name }}"
            state: present
          when: item.required == True
          loop: "{{ packages }}"

--------------------------------------------------------------------------------
Ansible Conditionals based on Facts, Variables, Re-use
--------------------------------------------------------------------------------

- ansible_facts['os_family'] == 'Debian'

--------------------------------------------------------------------------------
Loops
--------------------------------------------------------------------------------

- What if we want to create a lot of users?
- "loop:" executes on each item inside the list
- Stores the value in the loop in a variable "item"
    - "user: name='{{ item }}'  state=present"
- Can have key-values for each dictionary item in a loop
    loop:
      - name: joe
        uid: 1010
      - name: bama
        uid: 1011
    
    - "user: name='{{ item.name }}' state = present uid = '{{ item.uid }}'"

- with_*
    - with_items:
        - joe
        - george
            ...
    - with_file:
    - with_url
    - with_mongodb
    - can be used with anything that has a lookup plugin
- lookup plugin